# Automatically build the project and run any configured tests for every push
# and submitted pull request. This can help catch issues that only occur on
# certain platforms or Java versions, and provides a first line of defence
# against bad commits.

name: build
on: [pull_request, push]

jobs:
  build:
    strategy:
      matrix:
        # Use these Java versions
        java: [
          1.8,  # Minimum supported by Minecraft
          11,   # Current Java LTS
          15    # Latest version
        ]
        # and run on both Linux and Windows
        os: [ubuntu-20.04, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: checkout repository
        uses: actions/checkout@v2
      - name: validate gradle wrapper
        uses: gradle/wrapper-validation-action@v1
      - name: setup jdk ${{ matrix.java }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}
      - name: make gradle wrapper executable
        if: ${{ runner.os != 'Windows' }}
        run: chmod +x ./gradlew
      - name: build
        run: ./gradlew build
      - name: capture build artifacts
        if: ${{ runner.os == 'Linux' && matrix.java == '11' }} # Only upload artifacts built from LTS java on one OS
        uses: actions/upload-artifact@v2
        with:
          name: Artifacts
          path: build/libs/

      - name: read version
        if: ${{ runner.os == 'Linux' && matrix.java == '11' && success() }} # Create release only from uploaded artifacts
        id: readFabricModJson
        run: |
          content=`cat build/resources/main/fabric.mod.json`
          # the following lines are only required for multi line json
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          # end of optional handling for multi line json
          echo "::set-output name=fabricModJson::$content"
      - name: create new release with latest tag
        if: ${{ runner.os == 'Linux' && matrix.java == '11' && success() }}
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: ${{ contains(fromJson(steps.readFabricModJson.outputs.fabricModJson).version, '-pre')}}
          title: "${{ fromJson(steps.readFabricModJson.outputs.fabricModJson).version }}"
          files: build/libs/
      - name: add version tag if not prerelease
        if: ${{ runner.os == 'Linux' && matrix.java == '11' && success() && !contains(fromJson(steps.readFabricModJson.outputs.fabricModJson).version, '-pre') }}
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "refs/tags/${{ fromJson(steps.readFabricModJson.outputs.fabricModJson).version }}",
              sha: context.sha
            })
